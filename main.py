import telebot
from threading import Thread
import time
from datetime import datetime
import pytz
import json
from flask import Flask, request
import os
from typing import Dict, List

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7598457393:AAGYDyzb67hgudu1e1wPiqet0imV-F6ZCiI'
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)


# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserState:
    def __init__(self):
        self.water_reminders: Dict[int, Dict[str, bool]] = {}  # chat_id -> {hour: confirmed}
        self.tablet_reminder: Dict[int, bool] = {}  # chat_id -> confirmed
        self.chat_ids: List[int] = []

    def add_user(self, chat_id: int) -> None:
        if chat_id not in self.chat_ids:
            self.chat_ids.append(chat_id)
            self.water_reminders[chat_id] = {}
            self.tablet_reminder[chat_id] = False
            self.save_state()

    def save_state(self) -> None:
        state = {
            'chat_ids': self.chat_ids,
            'water_reminders': self.water_reminders,
            'tablet_reminder': self.tablet_reminder
        }
        with open('bot_state.json', 'w') as f:
            json.dump(state, f)

    def load_state(self) -> None:
        try:
            with open('bot_state.json', 'r') as f:
                state = json.load(f)
                self.chat_ids = state.get('chat_ids', [])
                self.water_reminders = state.get('water_reminders', {})
                self.tablet_reminder = state.get('tablet_reminder', {})

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                self.water_reminders = {int(k): v for k, v in self.water_reminders.items()}
                self.tablet_reminder = {int(k): v for k, v in self.tablet_reminder.items()}
        except (FileNotFoundError, json.JSONDecodeError):
            self.chat_ids = []
            self.water_reminders = {}
            self.tablet_reminder = {}


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
state = UserState()

WATER_MESSAGES = [
    "–ö–æ—Ç–∫–∞, –ø–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä—É –≥–ª–æ—Ç–æ—á–∫–æ–≤ –≤–æ–¥—ã! üíß",
    "–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–ª–Ω—ã–π –ª–∏ —É —Ç–µ–±—è —Å—Ç–∞–∫–∞–Ω. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è, –µ—Å–ª–∏ —è –¥–æ–º–∞. –Ø –ø—Ä–∏–Ω–µ—Å—É –∏ –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø–æ–ø–∏—Ç—åüíß",
    "–õ—é–±–æ—á–∫–∞, –≤–æ–¥–∏—á–∫–∞ —Å—Ç–æ–∏—Ç –≤–æ–∑–ª–µ —Ç–µ–±—è –∏ –Ω–∞–¥–æ –ø–æ–ø–∏—Ç—å!üíß",
    "–í—Ä–µ–º—è –æ—Ç–æ—Ä–≤–∞—Ç—å—Å—è –æ—Ç —Ä–∞–±–æ—Ç—ã, –Ω–µ–º–Ω–æ–≥–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å –∏ –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã! üíß",
    "–ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã, —Ç–æ —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –∫–æ—Ç–∫–∞ —Å—Ç–∞–Ω–µ—Ç —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ! üíß",
    "–ö–æ—Ç–∞, –Ω–µ –∂—É–ª—å–Ω–∏—á–∞–π! –°–¥–µ–ª–∞–π –≥–ª–æ—Ç–æ—á–µ–∫ –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—Éüíß"
]

TABLET_MESSAGE = "–ê –µ—â—ë, –∫–æ—Ç–∫–∞, —É–∂–µ –≤—Ä–µ–º—è –≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É! –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –∏ —è –ø—Ä–∏–Ω–µ—Å—É üíä"


def is_weekday():
    return datetime.now(pytz.timezone('Europe/Moscow')).weekday() < 5


def create_water_markup(hour: int):
    markup = telebot.types.InlineKeyboardMarkup()
    button = telebot.types.InlineKeyboardButton(
        "‚úÖ –í—ã–ø–∏–ª–∞ –≤–æ–¥—É",
        callback_data=f"water_confirm_{hour}"
    )
    markup.add(button)
    return markup


def create_tablet_markup():
    markup = telebot.types.InlineKeyboardMarkup()
    button = telebot.types.InlineKeyboardButton(
        "‚úÖ –¢–∞–±–ª–µ—Ç–∫—É –≤—ã–ø–∏–ª–∞",
        callback_data="tablet_confirm"
    )
    markup.add(button)
    return markup


def send_water_reminder(chat_id: int, hour: int) -> None:
    if str(hour) not in state.water_reminders.get(chat_id, {}):
        state.water_reminders[chat_id][str(hour)] = False

    if not state.water_reminders[chat_id][str(hour)]:
        message = WATER_MESSAGES[hour % len(WATER_MESSAGES)]
        bot.send_message(chat_id, message)
        bot.send_message(
            chat_id,
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –≤—ã–ø–∏–ª–∞ –≤–æ–¥–∏—á–∫—É:",
            reply_markup=create_water_markup(hour)
        )


def send_tablet_reminder(chat_id: int) -> None:
    if not state.tablet_reminder.get(chat_id, False):
        bot.send_message(
            chat_id,
            TABLET_MESSAGE,
            reply_markup=create_tablet_markup()
        )


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    state.add_user(chat_id)
    bot.reply_to(
        message,
        "–ö–æ—Ç–∫–∞, –ø—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–±—è –æ—á–µ–Ω—å –ª—é–±–ª—é ‚ù§Ô∏è\n\n"
        "–Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å, —á—Ç–æ–±—ã —Ç—ã –ø–∏–ª–∞ –≤–æ–¥–∏—á–∫—É –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏!\n\n"
        "–ù–µ –∑–∞–±—ã–≤–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –ø–æ–ø—å–µ—à—å üòä"
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("water_confirm_"))
def water_confirmation(call):
    chat_id = call.message.chat.id
    hour = call.data.split("_")[-1]

    if chat_id in state.water_reminders:
        state.water_reminders[chat_id][hour] = True
        state.save_state()

    bot.answer_callback_query(call.id)
    bot.send_message(chat_id, "–¢—ã —É –º–µ–Ω—è —Å–∞–º–∞—è –ª—É—á—à–∞—è! üòä")


@bot.callback_query_handler(func=lambda call: call.data == "tablet_confirm")
def tablet_confirmation(call):
    chat_id = call.message.chat.id
    state.tablet_reminder[chat_id] = True
    state.save_state()

    bot.answer_callback_query(call.id)
    bot.send_message(chat_id, "–ü—Ä–æ—Å—Ç–æ —É–º–Ω–∏—á–∫–∞! –ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤ —Å–≤–æ—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ üòä")


def reset_daily_state():
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è"""
    for chat_id in state.chat_ids:
        state.water_reminders[chat_id] = {}
        state.tablet_reminder[chat_id] = False
    state.save_state()


def reminder_thread():
    last_day = -1

    while True:
        current_time = datetime.now(pytz.timezone('Europe/Moscow'))

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
        if current_time.day != last_day:
            reset_daily_state()
            last_day = current_time.day

        if is_weekday():
            hour = current_time.hour
            minute = current_time.minute

            if hour in [10, 12, 14, 16, 18, 20] and minute == 0:
                for chat_id in state.chat_ids:
                    try:
                        send_water_reminder(chat_id, hour)
                        if hour == 12:
                            send_tablet_reminder(chat_id)
                    except telebot.apihelper.ApiException as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if minute % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                for chat_id in state.chat_ids:
                    if str(hour) in state.water_reminders.get(chat_id, {}) and \
                            not state.water_reminders[chat_id][str(hour)]:
                        try:
                            send_water_reminder(chat_id, hour)
                        except telebot.apihelper.ApiException as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

            if hour >= 12 and minute % 30 == 0:  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ 12:00
                for chat_id in state.chat_ids:
                    if not state.tablet_reminder.get(chat_id, False):
                        try:
                            send_tablet_reminder(chat_id)
                        except telebot.apihelper.ApiException as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–∞–±–ª–µ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

        time.sleep(60)


@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
        bot.process_new_updates([update])
        return ''
    return 'ok'


if __name__ == "__main__":
    state.load_state()

    reminder_thread = Thread(target=reminder_thread, daemon=True)
    reminder_thread.start()

    bot.remove_webhook()
    bot.set_webhook(url=f'https://vita-bot.up.railway.app/{TOKEN}')

    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)